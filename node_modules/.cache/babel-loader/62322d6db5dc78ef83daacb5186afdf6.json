{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\Kasper\\\\test\\\\Vo\\\\react-multi-choice-quiz\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport quizQuestions from './api/quizQuestions';\nimport Quiz from './components/Quiz';\nimport Result from './components/Result';\nimport logo from \"./svg/logo.svg\";\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      isquestion: \"true\",\n      questionId: 1,\n      question: '',\n      answerOptions: [],\n      answer: '',\n      answersCount: {},\n      result: ''\n    };\n    _this.handleAnswerSelected = _this.handleAnswerSelected.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var shuffledAnswerOptions = quizQuestions.map(function (question) {\n        return _this2.shuffleArray(question.answers);\n      });\n      this.setState({\n        question: quizQuestions[0].question,\n        answerOptions: shuffledAnswerOptions[0]\n      });\n    }\n  }, {\n    key: \"shuffleArray\",\n    value: function shuffleArray(array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    }\n  }, {\n    key: \"handleAnswerSelected\",\n    value: function handleAnswerSelected(event) {\n      var _this3 = this;\n\n      this.setUserAnswer(event.currentTarget.value);\n      setTimeout(function () {\n        return _this3.setResults(_this3.getResults());\n      }, 300);\n    }\n  }, {\n    key: \"setUserAnswer\",\n    value: function setUserAnswer(answer) {\n      this.setState(function (state, props) {\n        return {\n          answer: answer,\n          isQuestion: \"false\"\n        };\n      });\n    }\n  }, {\n    key: \"setNextQuestion\",\n    value: function setNextQuestion() {\n      var counter = this.state.counter + 1;\n      var questionId = this.state.questionId + 1;\n      this.setState({\n        counter: counter,\n        questionId: questionId,\n        question: quizQuestions[counter].question,\n        answerOptions: quizQuestions[counter].answers,\n        answer: ''\n      });\n    }\n  }, {\n    key: \"getGoodAnswer\",\n    value: function getGoodAnswer(answerOptions) {\n      for (var i = 0; i < answerOptions.length; i++) {\n        if (answerOptions[i].type === \"Yes\") return i;\n      }\n    }\n    /*getResults() {\r\n      const answersCount = this.state.answersCount;\r\n      const answersCountKeys = Object.keys(answersCount);\r\n      const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n      const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n        return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\r\n    }*/\n\n  }, {\n    key: \"getResults\",\n    value: function getResults() {\n      console.log(this.state.answerOptions);\n      console.log(this.getGoodAnswer(this.state.answerOptions));\n      return this.state.answerOptions[this.getGoodAnswer(this.state.answerOptions)].content;\n    }\n  }, {\n    key: \"setResults\",\n    value: function setResults(getResults) {\n      this.setState({\n        result: getResults\n      });\n      /*if (result.length === 1) {\r\n        this.setState({ result: result[0] });\r\n      } else {\r\n        this.setState({ result: 'Undetermined' });\r\n      }*/\n    }\n  }, {\n    key: \"renderQuiz\",\n    value: function renderQuiz() {\n      return React.createElement(Quiz, {\n        isQuestion: key.isQuestion,\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"renderResult\",\n    value: function renderResult() {\n      return React.createElement(Result, {\n        isQuestion: this.state.isQuestion,\n        answer: this.state.answer,\n        answerOptions: this.state.answerOptions,\n        questionId: this.state.questionId,\n        question: this.state.question,\n        questionTotal: quizQuestions.length,\n        onAnswerSelected: this.handleAnswerSelected,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"App-header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo,\n        className: \"App-logo\",\n        alt: \"logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"React Quiz\")), this.state.result ? this.renderResult() : this.renderQuiz());\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\Kasper\\test\\Vo\\react-multi-choice-quiz\\src\\App.js"],"names":["React","Component","quizQuestions","Quiz","Result","App","props","state","isquestion","questionId","question","answerOptions","answer","answersCount","result","handleAnswerSelected","bind","shuffledAnswerOptions","map","shuffleArray","answers","setState","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","event","setUserAnswer","currentTarget","value","setTimeout","setResults","getResults","isQuestion","counter","i","type","console","log","getGoodAnswer","content","key","logo","renderResult","renderQuiz"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;AAEA,OAAO,WAAP;;IAEMC,G;;;;;AACJ,eAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,6EAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,MADD;AAEXC,MAAAA,UAAU,EAAE,CAFD;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXC,MAAAA,aAAa,EAAE,EAJJ;AAKXC,MAAAA,MAAM,EAAE,EALG;AAMXC,MAAAA,YAAY,EAAE,EANH;AAOXC,MAAAA,MAAM,EAAE;AAPG,KAAb;AAUA,UAAKC,oBAAL,GAA4B,MAAKA,oBAAL,CAA0BC,IAA1B,uDAA5B;AAbiB;AAclB;;;;wCAEmB;AAAA;;AAClB,UAAMC,qBAAqB,GAAGf,aAAa,CAACgB,GAAd,CAAkB,UAAAR,QAAQ;AAAA,eACtD,MAAI,CAACS,YAAL,CAAkBT,QAAQ,CAACU,OAA3B,CADsD;AAAA,OAA1B,CAA9B;AAGA,WAAKC,QAAL,CAAc;AACZX,QAAAA,QAAQ,EAAER,aAAa,CAAC,CAAD,CAAb,CAAiBQ,QADf;AAEZC,QAAAA,aAAa,EAAEM,qBAAqB,CAAC,CAAD;AAFxB,OAAd;AAID;;;iCAEYK,K,EAAO;AAClB,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,UACEC,cADF;AAAA,UAEEC,WAFF,CADkB,CAKlB;;AACA,aAAO,MAAMH,YAAb,EAA2B;AACzB;AACAG,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,QAAAA,YAAY,IAAI,CAAhB,CAHyB,CAKzB;;AACAE,QAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,QAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,QAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACD;;AAED,aAAOH,KAAP;AACD;;;yCAEoBQ,K,EAAO;AAAA;;AAC1B,WAAKC,aAAL,CAAmBD,KAAK,CAACE,aAAN,CAAoBC,KAAvC;AACAC,MAAAA,UAAU,CAAC;AAAA,eAAM,MAAI,CAACC,UAAL,CAAgB,MAAI,CAACC,UAAL,EAAhB,CAAN;AAAA,OAAD,EAA2C,GAA3C,CAAV;AACD;;;kCAEaxB,M,EAAQ;AACpB,WAAKS,QAAL,CAAc,UAACd,KAAD,EAAQD,KAAR;AAAA,eAAmB;AAC/BM,UAAAA,MAAM,EAAEA,MADuB;AAE/ByB,UAAAA,UAAU,EAAE;AAFmB,SAAnB;AAAA,OAAd;AAID;;;sCAEiB;AAChB,UAAMC,OAAO,GAAG,KAAK/B,KAAL,CAAW+B,OAAX,GAAqB,CAArC;AACA,UAAM7B,UAAU,GAAG,KAAKF,KAAL,CAAWE,UAAX,GAAwB,CAA3C;AAEA,WAAKY,QAAL,CAAc;AACZiB,QAAAA,OAAO,EAAEA,OADG;AAEZ7B,QAAAA,UAAU,EAAEA,UAFA;AAGZC,QAAAA,QAAQ,EAAER,aAAa,CAACoC,OAAD,CAAb,CAAuB5B,QAHrB;AAIZC,QAAAA,aAAa,EAAET,aAAa,CAACoC,OAAD,CAAb,CAAuBlB,OAJ1B;AAKZR,QAAAA,MAAM,EAAE;AALI,OAAd;AAOD;;;kCACaD,a,EAAe;AAC3B,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,aAAa,CAACa,MAAlC,EAA0Ce,CAAC,EAA3C,EAA+C;AAC7C,YAAI5B,aAAa,CAAC4B,CAAD,CAAb,CAAiBC,IAAjB,KAA0B,KAA9B,EACE,OAAOD,CAAP;AACH;AACF;AACD;;;;;;;;;;iCASa;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKnC,KAAL,CAAWI,aAAvB;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,aAAL,CAAmB,KAAKpC,KAAL,CAAWI,aAA9B,CAAZ;AACA,aAAO,KAAKJ,KAAL,CAAWI,aAAX,CAAyB,KAAKgC,aAAL,CAAmB,KAAKpC,KAAL,CAAWI,aAA9B,CAAzB,EAAuEiC,OAA9E;AACD;;;+BAEUR,U,EAAY;AACrB,WAAKf,QAAL,CAAc;AAAEP,QAAAA,MAAM,EAAEsB;AAAV,OAAd;AACA;;;;;AAKD;;;iCAEY;AACX,aACE,oBAAC,IAAD;AACE,QAAA,UAAU,EAAES,GAAG,CAACR,UADlB;AAEE,QAAA,MAAM,EAAE,KAAK9B,KAAL,CAAWK,MAFrB;AAGE,QAAA,aAAa,EAAE,KAAKL,KAAL,CAAWI,aAH5B;AAIE,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWE,UAJzB;AAKE,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QALvB;AAME,QAAA,aAAa,EAAER,aAAa,CAACsB,MAN/B;AAOE,QAAA,gBAAgB,EAAE,KAAKT,oBAPzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;;;mCAEc;AACb,aAAO,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAE,KAAKR,KAAL,CAAW8B,UAA/B;AACL,QAAA,MAAM,EAAE,KAAK9B,KAAL,CAAWK,MADd;AAEL,QAAA,aAAa,EAAE,KAAKL,KAAL,CAAWI,aAFrB;AAGL,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWE,UAHlB;AAIL,QAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,QAJhB;AAKL,QAAA,aAAa,EAAER,aAAa,CAACsB,MALxB;AAML,QAAA,gBAAgB,EAAE,KAAKT,oBANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAOD;;;6BAEQ;AACP,aACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAE+B,IAAV;AAAgB,QAAA,SAAS,EAAC,UAA1B;AAAqC,QAAA,GAAG,EAAC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF,EAKG,KAAKvC,KAAL,CAAWO,MAAX,GAAoB,KAAKiC,YAAL,EAApB,GAA0C,KAAKC,UAAL,EAL7C,CADF;AASD;;;;EAvIe/C,S;;AA0IlB,eAAeI,GAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport quizQuestions from './api/quizQuestions';\r\nimport Quiz from './components/Quiz';\r\nimport Result from './components/Result';\r\nimport logo from './svg/logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isquestion: \"true\",\r\n      questionId: 1,\r\n      question: '',\r\n      answerOptions: [],\r\n      answer: '',\r\n      answersCount: {},\r\n      result: ''\r\n    };\r\n\r\n    this.handleAnswerSelected = this.handleAnswerSelected.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const shuffledAnswerOptions = quizQuestions.map(question =>\r\n      this.shuffleArray(question.answers)\r\n    );\r\n    this.setState({\r\n      question: quizQuestions[0].question,\r\n      answerOptions: shuffledAnswerOptions[0]\r\n    });\r\n  }\r\n\r\n  shuffleArray(array) {\r\n    var currentIndex = array.length,\r\n      temporaryValue,\r\n      randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n      // Pick a remaining element...\r\n      randomIndex = Math.floor(Math.random() * currentIndex);\r\n      currentIndex -= 1;\r\n\r\n      // And swap it with the current element.\r\n      temporaryValue = array[currentIndex];\r\n      array[currentIndex] = array[randomIndex];\r\n      array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n  }\r\n\r\n  handleAnswerSelected(event) {\r\n    this.setUserAnswer(event.currentTarget.value);\r\n    setTimeout(() => this.setResults(this.getResults()), 300);\r\n  }\r\n\r\n  setUserAnswer(answer) {\r\n    this.setState((state, props) => ({\r\n      answer: answer,\r\n      isQuestion: \"false\"\r\n    }));\r\n  }\r\n\r\n  setNextQuestion() {\r\n    const counter = this.state.counter + 1;\r\n    const questionId = this.state.questionId + 1;\r\n\r\n    this.setState({\r\n      counter: counter,\r\n      questionId: questionId,\r\n      question: quizQuestions[counter].question,\r\n      answerOptions: quizQuestions[counter].answers,\r\n      answer: ''\r\n    });\r\n  }\r\n  getGoodAnswer(answerOptions) {\r\n    for (var i = 0; i < answerOptions.length; i++) {\r\n      if (answerOptions[i].type === \"Yes\")\r\n        return i;\r\n    }\r\n  }\r\n  /*getResults() {\r\n    const answersCount = this.state.answersCount;\r\n    const answersCountKeys = Object.keys(answersCount);\r\n    const answersCountValues = answersCountKeys.map(key => answersCount[key]);\r\n    const maxAnswerCount = Math.max.apply(null, answersCountValues);\r\n\r\n    return answersCountKeys.filter(key => answersCount[key] === maxAnswerCount);\r\n  }*/\r\n\r\n  getResults() {\r\n    console.log(this.state.answerOptions);\r\n    console.log(this.getGoodAnswer(this.state.answerOptions));\r\n    return this.state.answerOptions[this.getGoodAnswer(this.state.answerOptions)].content;\r\n  }\r\n\r\n  setResults(getResults) {\r\n    this.setState({ result: getResults });\r\n    /*if (result.length === 1) {\r\n      this.setState({ result: result[0] });\r\n    } else {\r\n      this.setState({ result: 'Undetermined' });\r\n    }*/\r\n  }\r\n\r\n  renderQuiz() {\r\n    return (\r\n      <Quiz\r\n        isQuestion={key.isQuestion}\r\n        answer={this.state.answer}\r\n        answerOptions={this.state.answerOptions}\r\n        questionId={this.state.questionId}\r\n        question={this.state.question}\r\n        questionTotal={quizQuestions.length}\r\n        onAnswerSelected={this.handleAnswerSelected}\r\n      />\r\n    );\r\n  }\r\n\r\n  renderResult() {\r\n    return <Result isQuestion={this.state.isQuestion}\r\n      answer={this.state.answer}\r\n      answerOptions={this.state.answerOptions}\r\n      questionId={this.state.questionId}\r\n      question={this.state.question}\r\n      questionTotal={quizQuestions.length}\r\n      onAnswerSelected={this.handleAnswerSelected} />;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-header\">\r\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n          <h2>React Quiz</h2>\r\n        </div>\r\n        {this.state.result ? this.renderResult() : this.renderQuiz()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}